// MyLanguage.bnf

{
  parserClass="example.parser.MyLanguageParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="MyLanguage"
  psiImplClassSuffix="Impl"
  psiPackage="example.psi"
  psiImplPackage="example.psi.impl"

  elementTypeHolderClass="example.psi.MyLanguageTypes"
  elementTypeClass="example.psi.MyLanguageElementType"
  tokenTypeClass="example.psi.MyLanguageTokenType"

  tokens = [
    IF_KEYWORD = "if"
    ELSE_KEYWORD = "else"
    WHILE_KEYWORD = "while"
    VAR_KEYWORD = "var"
    PARENT_KEYWORD = "regexp:[pP]arent"
    CONTAINER_KEYWORD = "regexp:[cC]ontainer"
    TRUE_KEYWORD = "true"
    FALSE_KEYWORD = "false"
    IIF_KEYWORD = "IIF"

    MACRO_IDENTIFIER = "regexp:Macro_[a-zA-Z_][a-zA-Z0-9_]*"
    JAVA_PATH_IDENTIFIER = "regexp:com*(\.[a-zA-Z_][a-zA-Z0-9_]*)+"
    IDENTIFIER = "regexp:[a-zA-Z_][a-zA-Z0-9_]*"

    SINGLE_QUOTED_STRING = "regexp:'[^']*'"
    DOUBLE_QUOTED_STRING = "regexp:\"[^\"]*\""
    NUMBER = "regexp:[0-9]+"

    AMP_ENTITY = "&amp;"
    LT_ENTITY = "&lt;"
    GT_ENTITY = "&gt;"
    AND_OP_ENTITY = "&amp;&amp;"

    PLUS = "+"
    MINUS = "-"
    MUL = "*"
    DIV = "/"
    AMPERSAND = "&" // This is the literal "&"
    AND_OP = "&&"
    OR_OP = "||"
    DOT = "."
    NOT_OP = "!"
    EQ = "="

    LESS_EQUAL = "<="
    GREATER_EQUAL = ">="
    EQUAL_EQUAL = "=="
    NOT_EQUAL = "!="
    LESS = "<"    // This is the literal "<"
    GREATER = ">" // This is the literal ">"
    NOT_EQUAL_ALT = "<>"

    LPAREN = "("
    RPAREN = ")"
    SEMICOLON = ";"
    COMMA = ","
    LBRACE = "{"
    RBRACE = "}"
    COLON = ":"
  ]
}

// ---------------------------------------------------------------------
// 语法规则 (Grammar Rules)
// ---------------------------------------------------------------------

root ::= top_level_statement*

private top_level_statement ::=
  (variable_declaration SEMICOLON)
  | ((expression_sequence | if_statement | while_statement) SEMICOLON?)

expression_sequence ::= expression_statement (SEMICOLON expression_statement)*

private statement ::=
  (variable_declaration SEMICOLON)
  | ((expression_sequence | if_statement | while_statement) SEMICOLON?)

variable_declaration ::= VAR_KEYWORD IDENTIFIER (EQ expression)?

expression_statement ::= expression

if_statement ::= IF_KEYWORD LPAREN expression RPAREN statement_block (ELSE_KEYWORD statement_block)?

while_statement ::= WHILE_KEYWORD LPAREN expression RPAREN statement_block

private statement_block ::= statement | block_statement

block_statement ::= LBRACE statement* RBRACE COLON*

expression ::= logical_or_expression
private logical_or_expression ::= logical_and_expression (OR_OP logical_and_expression)*
private logical_and_expression ::= comparison_expression ((AND_OP|AND_OP_ENTITY) comparison_expression)*

private comparison_expression ::= additive_expression ((LESS_EQUAL | GREATER_EQUAL | EQUAL_EQUAL | NOT_EQUAL | LESS | GREATER | NOT_EQUAL_ALT | LT_ENTITY | GT_ENTITY) additive_expression)*

private additive_expression ::= multiplicative_expression ((PLUS | MINUS | AMPERSAND | AMP_ENTITY) multiplicative_expression)*

private multiplicative_expression ::= unary_expression ((MUL | DIV) unary_expression)*
private unary_expression ::= (MINUS | NOT_OP) unary_expression | primary_expression
primary_expression ::=
  constant
  | function_call
  | variable_reference
  | LPAREN expression RPAREN
  | boolean_constant
  | block_statement
  | COLON
variable_reference ::= path
constant ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING | NUMBER
boolean_constant ::= TRUE_KEYWORD | FALSE_KEYWORD
function_call ::= ((PARENT_KEYWORD | CONTAINER_KEYWORD) DOT)? (macro_call_expression | path | java_method_call | iif_function_call) LPAREN argument_list? RPAREN
macro_call_expression ::= MACRO_IDENTIFIER
java_method_call ::= JAVA_PATH_IDENTIFIER
iif_function_call ::= IIF_KEYWORD
argument_list ::= expression (COMMA expression)*
private path ::= ((PARENT_KEYWORD | CONTAINER_KEYWORD) DOT)? IDENTIFIER