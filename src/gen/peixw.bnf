// MyLanguage.bnf

{
  parserClass="com.example.parser.MyLanguageParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="MyLanguage"
  psiImplClassSuffix="Impl"
  psiPackage="com.example.psi"
  psiImplPackage="com.example.psi.impl"

  elementTypeHolderClass="com.example.psi.MyLanguageTypes"
  elementTypeClass="com.example.psi.MyLanguageElementType"
  tokenTypeClass="com.example.psi.MyLanguageTokenType"

  tokens = [
    // 关键字 (Keywords)
    IF_KEYWORD = "if"
    ELSE_KEYWORD = "else"
    WHILE_KEYWORD = "while"
    VAR_KEYWORD = "var"
    PARENT_KEYWORD = "parent"

    // 标识符 (Identifiers)
    IDENTIFIER = "regexp:[a-zA-Z_][a-zA-Z0-9_]*" // 变量名、函数名等
    MACRO_IDENTIFIER = "regexp:Macro_[a-zA-Z_][a-zA-Z0-9_]*" // 宏标识符
    JAVA_PATH_IDENTIFIER = "regexp:[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)+" // Java路径

    // 常量 (Constants)
    SINGLE_QUOTED_STRING = "regexp:'[^']*'" // 'xxx'
    DOUBLE_QUOTED_STRING = "regexp:\"[^\"]*\"" // "xxx"
    BRACE_QUOTED_STRING = "regexp:\{[^\}]*\}" // {xxx}

    // 运算符 (Operators)
    PLUS = "+"
    MINUS = "-"
    MUL = "*"
    DIV = "/"
    AMPERSAND = "&" // 字符串拼接
    AND_OP = "&&"
    OR_OP = "||"
    DOT = "."

    // 标点符号 (Punctuation)
    LPAREN = "("
    RPAREN = ")"
    SEMICOLON = ";"
    COMMA = ","
  ]
}

// ---------------------------------------------------------------------
// 语法规则 (Grammar Rules)
// ---------------------------------------------------------------------

root ::= statement*

private statement ::= (variable_declaration | expression_statement | if_statement | while_statement) SEMICOLON

variable_declaration ::= VAR_KEYWORD IDENTIFIER

expression_statement ::= expression

if_statement ::= IF_KEYWORD LPAREN expression RPAREN statement (ELSE_KEYWORD statement)?

while_statement ::= WHILE_KEYWORD LPAREN expression RPAREN statement

// 表达式 (Expressions)
// 优先级从低到高定义，以处理操作符优先级
// Lower precedence for logical OR
expression ::= logical_or_expression

private logical_or_expression ::= logical_and_expression (OR_OP logical_and_expression)*

// Higher precedence for logical AND
private logical_and_expression ::= additive_expression (AND_OP additive_expression)*

// Additive expressions (+, -) and string concatenation (&)
// String concatenation has similar precedence to arithmetic, adjust if needed
private additive_expression ::= multiplicative_expression ((PLUS | MINUS | AMPERSAND) multiplicative_expression)*

// Multiplicative expressions (*, /)
private multiplicative_expression ::= primary_expression ((MUL | DIV) primary_expression)*

// Primary expressions: the most basic elements
primary_expression ::=
  constant
  | function_call
  | variable_reference
  | LPAREN expression RPAREN

variable_reference ::= IDENTIFIER

constant ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING | BRACE_QUOTED_STRING

function_call ::=
  (MACRO_IDENTIFIER | IDENTIFIER | java_method_call | parent_call) LPAREN argument_list? RPAREN

java_method_call ::= JAVA_PATH_IDENTIFIER

parent_call ::= PARENT_KEYWORD DOT IDENTIFIER

argument_list ::= expression (COMMA expression)*